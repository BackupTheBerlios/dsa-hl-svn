float4x4 matViewProjection;

uniform float scale_Texture0;
uniform float scale_Texture1;
uniform float scale_Texture2;
uniform float scale_Texture3;
uniform float scale_Texture4;

uniform float scale_Detail0;
uniform float scale_Detail1;
uniform float scale_Detail2;
uniform float scale_Detail3;

uniform float4 Light_Ambient;
uniform float4 Light_Color0;
uniform float4 Light_Position0;
uniform float4 Light_Attenuation0;

uniform float4 Light_Color1;
uniform float4 Light_Position1;
uniform float4 Light_Attenuation1;


struct VS_OUTPUT 
{
   float4 Position : POSITION0;
   float4 Color:   COLOR0;
   float4 UV0 : TEXCOORD0;
   float4 UV1 : TEXCOORD1;
   float4 UV2 : TEXCOORD2;
   float4 UV3 : TEXCOORD3;
   float4 UV4 : TEXCOORD4;
   float4 Light: COLOR1;
};

VS_OUTPUT vs_main( float4 Position : POSITION0,
                   float4 Color:COLOR0,
                   float2 UV:TEXCOORD0,
                   float3 Normal: NORMAL)
{
   VS_OUTPUT Output;
   UV = Position.xz /4;
   
   Output.UV0 = float4(UV*scale_Texture0,UV*scale_Detail0);
   Output.UV1 = float4(UV*scale_Texture1,UV*scale_Detail1);
   Output.UV2 = float4(UV*scale_Texture2,UV*scale_Detail2);
   Output.UV3 = float4(UV*scale_Texture3,UV*scale_Detail3);
   Output.UV4 = float4(UV*scale_Texture4,UV);
   
   
   Output.Position = mul( matViewProjection, Position );
   
   Output.Color = Color;
   
   // ######## Light 0 #########
   float3 LightDir0 = Light_Position0 - Position * Light_Position0.w;
   float Dist0 = length(LightDir0);
   LightDir0 /= Dist0;
   
   float DistAttn0 = saturate(1/(Light_Attenuation0.y +
                                Light_Attenuation0.z * Dist0 +
                                Light_Attenuation0.w * Dist0 * Dist0));
   float AngleAttn0= saturate(dot(Normal,LightDir0));
   
   
   // ######## Light 1 #########
   float3 LightDir1 = Light_Position1 - Position * Light_Position1.w;
   float Dist1 = length(LightDir1);
   LightDir1 /= Dist1;
   
   float DistAttn1 = saturate(1/(Light_Attenuation1.y +
                                Light_Attenuation1.z * Dist0 +
                                Light_Attenuation1.w * Dist1 * Dist1));
   float AngleAttn1= saturate(dot(Normal,LightDir1));
   
   
   // Light Output
   Output.Light = (Light_Ambient-0.5 + ((Light_Color0 * DistAttn0 * AngleAttn0) + (Light_Color1 * DistAttn1 * AngleAttn1))*1.25);
   
   return( Output );
   
}



