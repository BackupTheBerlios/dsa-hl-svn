VS.NET

Um Rastullahs Lockenpracht bauen zu können werden folgende zusätzliche
Bibliotheken benötigt:

Ogre 3D 1.01 - Azatoth + Patches
http://www.ogre3d.org

Ruby - 1.8
http://ruby-lang.org

SWIG - 3.21  (exakt diese Version)
http://www.swig.org

OPENAL
http://developer.creative.com/landing.asp?cat=1&sbcat=31&top=38

Vorbis
http://www.vorbis.com/


OgreODE - Final Compatible 1.0.0
http://www.green-eyed-monster.com/xoops/modules/mydownloads/visit.php?cid=3&lid=10

Ode
http://www.ode.org - Patched (siehe OgreODE Docs)

Cegui 0.2
http://www.cegui.org.uk/

Xerxes
http://xml.apache.org/xerces-c/download.cgi

boost
http://www.boost.org

Diese sind alle unterhalb von rl/dependencies anzulegen.

Die Projekte müssen alle im Verzeichnis dependencies angelegt werden.
Die Verzeichnisstruktur sollte jeweils erhalten bleiben.

VS.Net-2003-Nutzer können sich alternativ von der Projektseite auch die Dependencies runterladen und ins rl-Verzeichnis entpacken.
Diese sind jedoch nicht immer aktuell.

Das Projekt kann man dann einfach kompilieren.
Um erfolgreich starten zu können braucht man unseren eigenen Look, dieser lässt sich aus dem Module rllooks erstellen. 
Dieses sollte im selben Verzeichnis, in dem auch rl liegt ausgecheckt werden, damit die dependencies gefunden werden.

Vor dem Debuggen müssen die nötigen Dateien in ein Distributionsverzeichnis
kopiert werden. Dazu dient das Skript tools/make_release.bat. Je nach kompilierter Konfiguration
müssen andere DLLs kopiert werden. Dafür gibt es die beiden bat-Dateien release_copy.bat
und debug_copy.bat jeweils für Release- und Debug-Konfiguration.
Es legt den Ordner rl_dist an. Danach muss man noch das modules-Verzeichnis dahin kopieren
Rastullah.exe startet dann das Programm.

Will man mit VS.NET debuggen muss man noch im Projektmenü des startup-Projektes
Im Punkt Debuggen das Startprogramm und das Arbeitsverzeichnis auf
Rastullah.exe im Verzeichnis rl_dist verweisen,
bzw. auf das Verzeichnis rl_dist.

