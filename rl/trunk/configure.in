AC_PREREQ(2.50)

AC_INIT(RL, 0.11.0)
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([1.6.1 foreign no-installinfo no-installman subdir-objects])
AC_CONFIG_HEADER(engine/common/include/config.h)

##AC_CANONICAL_TARGET

dnl Check for programs
AC_LANG([C++])
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AM_PROG_LIBTOOL


dnl GCC ersion check
if test x$GCC = xyes; then
    AC_MSG_CHECKING([version 3.x of gcc])
    if test -n "`$CC --version 2>&1|grep '3.'`"; then
        AC_DEFINE(EXT_HASH, 1, Use old STL hash options)
        AC_DEFINE(GCC_3_1, 1, 3.x GCC version)
        AC_MSG_RESULT(yes);
    else
        AC_MSG_RESULT(no)!
    fi
fi

# ***** DEBUGGING
AC_ARG_ENABLE(debug,[  --enable-debug          enable debugging [default=no]])
if test "$enable_debug" = "yes"; then
    CXXFLAGS="$CXXFLAGS -g"
else
    CXXFLAGS="$CXXFLAGS -O2"
fi

# ***** PROFILING
AC_ARG_ENABLE(profiling,[  --enable-profiling  enable profiling [default=no]])
if test "$enable_profiling" = "yes"; then
    CXXFLAGS="$CXXFLAGS -pg"
    LDFLAGS="$LDFLAGS -pg"
fi

AC_ARG_ENABLE(test-coverage,[  --enable-test-coverage  enable coverage testing [default=no]])
if test "$enable_test_coverage" = "yes"; then
    CXXFLAGS="$CXXFLAGS -fprofile-arcs -ftest-coverage"
fi

# OpenAL
AC_CHECK_LIB(openal, main, [], AC_MSG_ERROR([Can't find OpenAL]))
AC_CHECK_HEADERS(AL/al.h, ,
    [AC_MSG_ERROR([cannot find OpenAL headers]) ])

# PortAudio
AC_CHECK_LIB(portaudio,main,WITH_PORTAUDIO="yes")
AM_CONDITIONAL(WITH_PORTAUDIO, test "$WITH_PORTAUDIO" = "yes")

# Ogg Vorbis
AC_CHECK_LIB(ogg,main,[], AC_MSG_ERROR([Can't find libogg]))
AC_CHECK_LIB(vorbis,main,[],AC_MSG_ERROR([Can't find libvorbis]))

# Ogre
PKG_CHECK_MODULES(OGRE, OGRE >= 0.14)
AC_ARG_WITH(ogre-plugins,[  --with-ogre-plugins=path        Set location of Ogre plugins],[ OGRE_PLUGINDIR="$withval"], [OGRE_PLUGINDIR=/usr/local/lib/OGRE])
AC_SUBST(OGRE_PLUGINDIR)

# CEGUI
PKG_CHECK_MODULES(CEGUI, CEGUI-OGRE)

dnl Other stuff we need
AC_CHECK_LIB([log4cxx], [main], AC_DEFINE(HAVE_LOG4CXX,[], [Log4cxx is installed]))
AC_CHECK_LIB([ode], [main], [], AC_MSG_ERROR([Can't find libode]))
AC_CHECK_LIB(m, pow)
AC_CHECK_LIB(z, gzopen)
AC_CHECK_FUNC(snprintf, AC_DEFINE(HAVE_SNPRINTF,,snprintf))
AC_CHECK_FUNC(vsnprintf, AC_DEFINE(HAVE_VSNPRINTF,1,vsnprintf))
AC_CHECK_PROG(HAVE_DOXYGEN_PROG, doxygen, `which doxygen`, false)
AC_CHECK_LIB(OpenThreads, [_init], , AC_MSG_ERROR([Can't find OpenThreads]))

AC_CHECK_HEADERS(xercesc/util/XercesVersion.hpp, ,
    [AC_MSG_ERROR([cannot find libxerces25 headers]) ])
AC_CHECK_LIB(xerces-c,main,,
    [AC_MSG_ERROR([cannot find the libxerces25 library]) ])

dnl --------------------------------------------
dnl       determine location of RUBY (auto)
dnl --------------------------------------------

dnl determine location of ruby
AC_PATH_PROG(ruby_path, ruby, no)
if test $ruby_path = no; then
	AC_MSG_ERROR(Cannot find Ruby! This program requires Ruby-1.8.0)
fi

dnl determine if the installed Ruby is suitable for us
if `$ruby_path -e 'exit 1 if VERSION >= "1.8.0"'` ; then
	AC_MSG_ERROR(Your Ruby is too old! At least Ruby-1.8.0 is required)
fi

dnl locate "ruby.h", "intern.h"
ruby_h_dir=`$ruby_path -r mkmf -e 'print Config::CONFIG[["archdir"]]'`
RUBY_CFLAGS="-I$ruby_h_dir"

dnl locate libruby-static.a + extra libraries (libcrypt)
ruby_lib=`$ruby_path -r mkmf -e 'c=Config::CONFIG; libs=c[["libdir"]]+"/"+c[["LIBRUBY"]]+" "+c[["LIBS"]]; print libs'`
RUBY_LIBS=$ruby_lib

AC_SUBST(RUBY_CFLAGS)
AC_SUBST(RUBY_LIBS)

SWIG_PROG
SWIG_ENABLE_CXX
#SWIG_MULTI_MODULE_SUPPORT
SWIG_RUBY

AC_LANG_PUSH([C])
AM_PATH_SDL([1.2.7], [AC_CHECK_LIB([SDL], [SDL_Init])], \
	AC_MSG_ERROR([Cannot find SDL! This program requires SDL >= 1.2.7]) )
AC_LANG_POP([C])

dnl Create the makefiles
AC_CONFIG_FILES([Makefile \
		docs/Makefile docs/src/Makefile \
		engine/Makefile \
		engine/common/Makefile engine/common/src/Makefile engine/common/include/Makefile \
		engine/core/Makefile engine/core/src/Makefile engine/core/include/Makefile \
		engine/dialog/Makefile engine/dialog/src/Makefile engine/dialog/include/Makefile \
		engine/ui/Makefile engine/ui/src/Makefile engine/ui/include/Makefile \
		engine/rules/Makefile engine/rules/src/Makefile engine/rules/include/Makefile engine/rules/tests/Makefile \
		engine/sound/Makefile engine/sound/src/Makefile engine/sound/include/Makefile engine/sound/tests/Makefile \
		engine/script/Makefile engine/script/swig/Makefile engine/script/src/Makefile \
		engine/startup/Makefile engine/startup/src/Makefile \
		modules/Makefile modules/common/Makefile modules/minidemo/Makefile \
		modules/common/conf/plugins.cfg \
		tools/Makefile \
    ])

AC_OUTPUT

