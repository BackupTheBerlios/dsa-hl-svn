AC_PREREQ(2.50)

AC_INIT(RL, 0.3.0)
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([1.6.1 foreign no-installinfo no-installman subdir-objects])
AC_CONFIG_HEADER(engine/common/include/config.h)
AC_CONFIG_MACRO_DIR([m4])

##AC_CANONICAL_TARGET

dnl Check for programs
AC_LANG([C++])
AC_PROG_CXX
AC_PROG_INSTALL
AM_PROG_LIBTOOL


# ***** DEBUGGING
AC_ARG_ENABLE(debug,AS_HELP_STRING([--enable-debug],[enable debugging @<:@default=no@:>@]))
if test "$enable_debug" = "yes"; then
    CXXFLAGS="$CXXFLAGS -g -O0 -DDEBUG"
else
    CXXFLAGS="$CXXFLAGS -O2 -DNDEBUG -s"
    INSTALL="$INSTALL -s"
fi
# ***** PROFILING
AC_ARG_ENABLE([profiling], AS_HELP_STRING([--enable-profiling], [enable profiling @<:@default=no@:>@]))
if test "$enable_profiling" = "yes"; then
    CXXFLAGS="$CXXFLAGS -pg -g"
    LDFLAGS="$LDFLAGS -pg -g"
fi

# Pthreads
CXXFLAGS="$CXXFLAGS -pthread"

#AC_ARG_ENABLE(test-coverage,[  --enable-test-coverage  enable coverage testing [default=no]])
#if test "$enable_test_coverage" = "yes"; then
#    CXXFLAGS="$CXXFLAGS -fprofile-arcs -ftest-coverage"
#fi

AC_ARG_ENABLE(tests,[  --enable-tests  enable unit testing [default=no]])
if test "$enable_tests" = "yes"; then
    AM_PATH_CPPUNIT(1.0.0, [],
        [
            AM_CONDITIONAL(with_tests, [false])
              AC_MSG_ERROR([Cannot find cppunit libs needed for testing])
        ])
    AM_CONDITIONAL(with_tests, [true])
else
    AM_CONDITIONAL(with_tests, [false])
fi

# fmod4
AC_ARG_ENABLE([fmod4], [AS_HELP_STRING([--enable-fmod4], [enable fmod 4.xx (FMODex) support @<:@default=check@:>@])],,[enable_fmod4=check])
AS_IF([test "x$enable_fmod4" != xno],
      [AC_CHECK_LIB([fmodex], [main],
          [AC_CHECK_HEADER([fmodex/fmod.hpp],
              [AC_SUBST([RL_AUDIOPLUGINS], ["$RL_AUDIOPLUGINS fmod4driver"])]
              [AC_SUBST([enable_fmod4], ["yes"])],
              [if test "x$enable_fmod4" != xcheck; then
                  AC_MSG_ERROR([fmod 4.xx support was explicitly enabled, but headers were not found])
              fi])
          ],
          [if test "x$enable_fmod4" != xcheck; then
              AC_MSG_ERROR([fmod 4.xx support was explicitly enabled, but libraries were not found])
           fi]
          [AC_SUBST([enable_fmod4], ["no"])])
      ])

# openal
AC_ARG_ENABLE([openal], [AS_HELP_STRING([--enable-openal], [enable OpenAL support @<:@default=check@:>@])],,[enable_openal=check])
AS_IF([test "x$enable_openal" != xno],
      [AC_CHECK_LIB([openal], [main],
          [AC_CHECK_HEADER([AL/al.h],
              [AC_SUBST([RL_AUDIOPLUGINS], ["$RL_AUDIOPLUGINS openaldriver"])]
              [AC_SUBST([enable_openal], ["yes"])],
              [if test "x$enable_openal" != xcheck; then
                  AC_MSG_ERROR([OpenAL support was explicitly enabled, but headers were not found])
              fi])
          ],
          [if test "x$enable_openal" != xcheck; then
              AC_MSG_ERROR([OpenAL support was explicitly enabled, but libraries were not found])
           fi]
          [AC_SUBST([enable_openal], ["no"])])
      ])

# Ogre
PKG_CHECK_MODULES([OGRE], [OGRE >= 1.4.0])
AC_ARG_WITH([ogre-plugins], [AS_HELP_STRING([--with-ogre-plugins=@<:@=DIR@:>@], [set location of Ogre plugins])] ,[OGRE_PLUGINDIR="$withval"], [OGRE_PLUGINDIR=`pkg-config OGRE --variable=plugindir`])
AC_SUBST(OGRE_PLUGINDIR)

# CEGUI
PKG_CHECK_MODULES([CEGUI], [CEGUI >= 0.5.0])
PKG_CHECK_MODULES([CEGUIOGRE], [CEGUI-OGRE])

# OpenSteer
AC_CHECK_HEADERS([OpenSteer/SteerLibrary.h], ,[AC_MSG_ERROR([Can't find OpenSteer headers])])
AC_CHECK_LIB([OpenSteer], [main], , [AC_MSG_ERROR([Can't find libOpenSteer])])


dnl Other stuff we need
AC_CHECK_PROG(HAVE_DOXYGEN_PROG, doxygen, `which doxygen`, false)
AC_CHECK_LIB([MadaBot], [main], [], AC_MSG_ERROR([Can't find libMadaBot]))

# Newton
AC_CHECK_LIB([Newton], [fopen], [], AC_MSG_ERROR([Can't find libNewton]) )
AC_CHECK_HEADERS([Newton.h], , AC_MSG_ERROR([Can't find Newton headers]))

# OgreNewt
PKG_CHECK_MODULES([OgreNewt], [OgreNewt >= 0.07])
OGRE_CFLAGS="${OGRE_CFLAGS} ${OgreNewt_CFLAGS}"
OGRE_LIBS="${OGRE_LIBS} ${OgreNewt_LIBS}"

# DSA4Werkzeug
PKG_CHECK_MODULES(Dsa4Wz, Dsa4Wz >= 1.33.0)

# XERCES
AC_CHECK_HEADERS(xercesc/util/XercesVersion.hpp, ,
    [AC_MSG_ERROR([cannot find libxerces headers]) ])
AC_CHECK_LIB(xerces-c,main,,
    [AC_MSG_ERROR([cannot find the libxerces library]) ])

# OIS
PKG_CHECK_MODULES(OIS, OIS >= 1.0.0)

# Boost
AX_BOOST_BASE(1.33.1)
AX_BOOST_FILESYSTEM()

dnl --------------------------------------------
dnl       determine location of RUBY (auto)
dnl --------------------------------------------

dnl determine location of ruby
AC_PATH_PROG(ruby_path, ruby, no)
if test $ruby_path = no; then
    AC_MSG_ERROR(Cannot find Ruby! This program requires Ruby-1.8.0)
fi

dnl determine if the installed Ruby is suitable for us
if `$ruby_path -e 'exit 1 if VERSION >= "1.8.0"'` ; then
    AC_MSG_ERROR(Your Ruby is too old! At least Ruby-1.8.0 is required)
fi

dnl locate "ruby.h", "intern.h"
ruby_h_dir=`$ruby_path -r mkmf -e 'print Config::CONFIG[["archdir"]]'`
RUBY_CFLAGS="-I$ruby_h_dir"

dnl locate libruby-static.a + extra libraries (libcrypt)
ruby_lib=`$ruby_path -r mkmf -e 'c=Config::CONFIG; libs=c[["libdir"]]+"/"+c[["LIBRUBY"]]+" "+c[["LIBS"]]; print libs'`
RUBY_LIBS=$ruby_lib

AC_SUBST(RUBY_CFLAGS)
AC_SUBST(RUBY_LIBS)

dnl Test for modified swig version
#SWIG_PROG(1.3.29)
#SWIG_ENABLE_CXX
#SWIG_RUBY

dnl Define the directory, where RL should look for modules
if test "x${prefix}" = "xNONE"; then
    prefix=${ac_default_prefix}
fi
dnl Must double eval here, to replace ${datadir} and after that ${prefix}
eval RL_MODULEDIR="${datadir}"
eval RL_MODULEDIR="${RL_MODULEDIR}/rastullah"
AC_SUBST(RL_MODULEDIR)


dnl Create the makefiles
AC_CONFIG_FILES([Makefile \
        docs/Makefile docs/src/Makefile \
        engine/Makefile \
        engine/ai/Makefile engine/ai/src/Makefile engine/ai/include/Makefile\
        engine/common/Makefile engine/common/src/Makefile engine/common/include/Makefile \
        engine/core/Makefile engine/core/src/Makefile engine/core/include/Makefile \
        engine/dialog/Makefile engine/dialog/src/Makefile engine/dialog/include/Makefile \
        engine/uicomponents/Makefile engine/uicomponents/src/Makefile engine/uicomponents/include/Makefile \
        engine/ui/Makefile engine/ui/src/Makefile engine/ui/include/Makefile \
        engine/rules/Makefile engine/rules/src/Makefile engine/rules/include/Makefile \
        engine/script/Makefile engine/script/swig/Makefile engine/script/src/Makefile \
        engine/startup/Makefile engine/startup/src/Makefile \
        tests/Makefile tests/coretests/Makefile tests/rulestests/Makefile \
        tests/multimediatests/Makefile tests/RlDialogTests/Makefile \
        plugins/Makefile \
        plugins/fmod4driver/Makefile plugins/fmod4driver/include/Makefile plugins/fmod4driver/src/Makefile \
        plugins/openaldriver/Makefile plugins/openaldriver/include/Makefile plugins/openaldriver/src/Makefile \
        tools/Makefile
    ])

AC_OUTPUT

eval RL_GAMEDIR="${bindir}"
eval RL_GAMEDIR="${RL_GAMEDIR}"

dnl Show a summary about important directories
echo
echo "***********************************************************"
echo "* Rastullahs Lockenpracht - Configuration Results Summary *"
echo "***********************************************************"
echo
echo " Code options:"
echo "       Building RL in debug mode:          ${enable_debug-no}"
echo "       Enable unit testing:                ${enable_tests-no}"
echo
echo " Sound plugins:"
echo "       FMOD 4 plugin:                      ${enable_fmod4-no}"
echo "       OpenAL plugin:                      ${enable_openal-no}"
echo
echo " Directory settings:"
echo "       rastullah binary will be placed in: ${RL_GAMEDIR}"
echo "       Module directory:                   ${RL_MODULEDIR}"
echo
echo "Type make && make install and pray!"
